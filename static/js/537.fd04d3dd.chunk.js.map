{"version":3,"file":"static/js/537.fd04d3dd.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/@chakra-ui/layout/dist/chunk-Z47J5YMH.mjs","components/contactList/ContactList.jsx","components/filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/contactForm/ContactForm.jsx","pages/Phonebook.js"],"sourcesContent":["\n\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n","// src/list.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [ListStylesProvider, useListStyles] = createContext({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `\n});\nvar List = forwardRef(function List2(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props);\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props);\n  const validChildren = getValidChildren(children);\n  const selector = \"& > *:not(style) ~ *:not(style)\";\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {};\n  return /* @__PURE__ */ jsx(ListStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n    chakra.ul,\n    {\n      ref,\n      listStyleType: styleType,\n      listStylePosition: stylePosition,\n      role: \"list\",\n      __css: { ...styles.container, ...spacingStyle },\n      ...rest,\n      children: validChildren\n    }\n  ) });\n});\nList.displayName = \"List\";\nvar OrderedList = forwardRef((props, ref) => {\n  const { as, ...rest } = props;\n  return /* @__PURE__ */ jsx(List, { ref, as: \"ol\", styleType: \"decimal\", marginStart: \"1em\", ...rest });\n});\nOrderedList.displayName = \"OrderedList\";\nvar UnorderedList = forwardRef(function UnorderedList2(props, ref) {\n  const { as, ...rest } = props;\n  return /* @__PURE__ */ jsx(List, { ref, as: \"ul\", styleType: \"initial\", marginStart: \"1em\", ...rest });\n});\nUnorderedList.displayName = \"UnorderedList\";\nvar ListItem = forwardRef(function ListItem2(props, ref) {\n  const styles = useListStyles();\n  return /* @__PURE__ */ jsx(chakra.li, { ref, ...props, __css: styles.item });\n});\nListItem.displayName = \"ListItem\";\nvar ListIcon = forwardRef(function ListIcon2(props, ref) {\n  const styles = useListStyles();\n  return /* @__PURE__ */ jsx(Icon, { ref, role: \"presentation\", ...props, __css: styles.icon });\n});\nListIcon.displayName = \"ListIcon\";\n\nexport {\n  useListStyles,\n  List,\n  OrderedList,\n  UnorderedList,\n  ListItem,\n  ListIcon\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { Box, Text, Button, UnorderedList } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const contactsFiltered = contacts?.filter(contact =>\n    contact?.name?.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const onDelContact = id => {\n    dispatch(deleteContact(id));\n  };\n  if (!contactsFiltered?.length) {\n    return (\n      <Box>\n        {' '}\n        <br />\n        No contacts found ¯\\_(ツ)_/¯{' '}\n      </Box>\n    );\n  }\n\n  return (\n    <UnorderedList>\n      {contactsFiltered.map(({ id, avatar, name, number }) => (\n        <div key={id}>\n          {/* <img\n            style={{ width: '2rem', borderRadius: '50%' }}\n            src={avatar}\n            alt={name} \n          /> */}\n          <Box\n            maxW=\"lg\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Text fontSize=\"22px\" as=\"b\">\n              <span>{name}:</span>\n            </Text>\n            <Text fontSize=\"22px\" as=\"b\">\n              <span>{number}</span>\n            </Text>\n            <Button\n              onClick={() => onDelContact(id)}\n              colorScheme=\"red\"\n              size=\"sm\"\n              borderRadius=\"xl\"\n              variant=\"solid\"\n              type=\"button\"\n              my={2}\n              p={3}\n            >\n              Delete\n            </Button>\n          </Box>\n        </div>\n      ))}\n    </UnorderedList>\n  );\n};\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Text,\n  Stack,\n  Box,\n} from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <Box maxW=\"sm\">\n      <Stack spacing={1.5}>\n        <Text fontSize={16}>Find contacts by name</Text>\n\n        <FormControl>\n          <FormLabel>\n            <Input\n              onChange={evt => dispatch(setFilter(evt.target.value.trim()))}\n              value={filter}\n              type=\"text\"\n              name=\"filter\"\n              placeholder=\"Start find by name...\"\n              htmlSize={12}\n              size=\"lg\"\n            />\n          </FormLabel>\n        </FormControl>\n      </Stack>\n    </Box>\n  );\n};\nexport default Filter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\nimport toast from 'react-hot-toast';\nimport {\n  Button,\n  Input,\n  FormControl,\n  FormLabel,\n  Stack,\n  Box,\n} from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const contact = {\n      id: nanoid(),\n      name: evt.currentTarget.elements.name.value,\n      number: evt.currentTarget.elements.number.value,\n    };\n\n    const addList = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (addList) {\n      return toast.error(`${contact.name} is already in contacts!`, {\n        position: 'top-right',\n        style: {\n          background: '#E9685C',\n          color: 'white',\n        },\n      });\n    }\n    dispatch(addContact(contact));\n    evt.currentTarget.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box maxW=\"sm\">\n        <Stack spacing={3}>\n          <FormControl>\n            <FormLabel htmlFor={nanoid()}>Name</FormLabel>\n            <Input\n              type=\"text\"\n              pattern=\"([A-Za-z]+[\\-\\s]?){7,25}\"\n              title=\"Enter your first and last name\"\n              name=\"name\"\n              placeholder=\"John Dow\"\n              htmlSize={12}\n              size=\"lg\"\n              id={nanoid()}\n              minLength={3}\n              required\n            />\n          </FormControl>\n          <br />\n          <FormControl>\n            <FormLabel htmlFor={nanoid()}>Phone number</FormLabel>\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n              placeholder=\"123-456-7890\"\n              htmlSize={12}\n              size=\"lg\"\n              id={nanoid()}\n              minLength={12}\n              maxLength={12}\n              required\n            />\n          </FormControl>\n        </Stack>\n        <Button\n          colorScheme=\"green\"\n          size=\"sm\"\n          borderRadius=\"lg\"\n          variant=\"solid\"\n          type=\"submit\"\n          my={4}\n        >\n          Add contact\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactList } from 'components/contactList/ContactList';\nimport { Filter } from 'components/filter/Filter';\nimport { ContactForm } from 'components/contactForm/ContactForm';\nimport { CircularProgress } from '@chakra-ui/react'\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && <CircularProgress isIndeterminate color='green.300' />}</div>\n      <Filter />\n      <ContactList />\n  </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","createContext","name","errorMessage","ListStylesProvider","useListStyles","List","forwardRef","props","ref","styles","useMultiStyleConfig","omitThemingProps","children","styleType","stylePosition","spacing","rest","validChildren","getValidChildren","spacingStyle","mt","jsx","value","chakra","listStyleType","listStylePosition","role","__css","container","displayName","as","marginStart","UnorderedList","item","Icon","icon","ContactList","useSelector","dispatch","useDispatch","contactsFiltered","contact","toLowerCase","includes","length","map","id","avatar","number","maxW","display","alignItems","justifyContent","fontSize","onClick","deleteContact","onDelContact","colorScheme","size","borderRadius","variant","type","my","p","Filter","I","onChange","evt","setFilter","target","trim","placeholder","htmlSize","nanoid","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","onSubmit","preventDefault","currentTarget","elements","find","toast","position","style","background","color","addContact","reset","htmlFor","pattern","title","minLength","required","maxLength","Tasks","useEffect","fetchContacts","Helmet","isIndeterminate"],"sourceRoot":""}