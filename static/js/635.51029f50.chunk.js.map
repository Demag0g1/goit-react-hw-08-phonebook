{"version":3,"file":"static/js/635.51029f50.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.js","pages/Login.js","../node_modules/@chakra-ui/button/dist/chunk-DGWZA2DU.mjs","../node_modules/@chakra-ui/button/dist/chunk-HCASMTTF.mjs","../node_modules/@chakra-ui/button/dist/chunk-HNNHG6RU.mjs","../node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs","../node_modules/@chakra-ui/button/dist/chunk-NAA7TEES.mjs","../node_modules/@chakra-ui/button/dist/chunk-FRFD4OXU.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"label\":\"LoginForm_label__F7sLE\"};","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport css from './LoginForm.module.css';\nimport { Button } from '@chakra-ui/react';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label}>\n        Email\n        <input type=\"email\" name=\"email\" autoComplete=\"email\" />\n      </label>\n      <label className={css.label}>\n        Password\n        <input\n          type=\"password\"\n          name=\"password\"\n          autoComplete=\"current-password\"\n        />\n      </label>\n      <Button as='button' colorScheme='messenger' size='md' borderRadius='lg' type=\"submit\" mx=\"auto\" my={10}>Log In  </Button>\n    </form>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n","// src/button-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\n\nexport {\n  ButtonGroupProvider,\n  useButtonGroup\n};\n","// src/button-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonIcon(props) {\n  const { children, className, ...rest } = props;\n  const _children = isValidElement(children) ? cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n  const _className = cx(\"chakra-button__icon\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.span,\n    {\n      display: \"inline-flex\",\n      alignSelf: \"center\",\n      flexShrink: 0,\n      ...rest,\n      className: _className,\n      children: _children\n    }\n  );\n}\nButtonIcon.displayName = \"ButtonIcon\";\n\nexport {\n  ButtonIcon\n};\n","// src/button-spinner.tsx\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonSpinner(props) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = /* @__PURE__ */ jsx(Spinner, { color: \"currentColor\", width: \"1em\", height: \"1em\" }),\n    className,\n    __css,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__spinner\", className);\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  const spinnerStyles = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css\n    }),\n    [__css, label, marginProp, spacing]\n  );\n  return /* @__PURE__ */ jsx(chakra.div, { className: _className, ...rest, __css: spinnerStyles, children });\n}\nButtonSpinner.displayName = \"ButtonSpinner\";\n\nexport {\n  ButtonSpinner\n};\n","// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n","import {\n  useButtonType\n} from \"./chunk-FRFD4OXU.mjs\";\nimport {\n  useButtonGroup\n} from \"./chunk-DGWZA2DU.mjs\";\nimport {\n  ButtonIcon\n} from \"./chunk-HCASMTTF.mjs\";\nimport {\n  ButtonSpinner\n} from \"./chunk-HNNHG6RU.mjs\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group, ...props });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo(() => {\n    const _focus = { ...styles == null ? void 0 : styles[\"_focus\"], zIndex: 1 };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...!!group && { _focus }\n    };\n  }, [styles, group]);\n  const { ref: _ref, type: defaultType } = useButtonType(as);\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children };\n  return /* @__PURE__ */ jsxs(\n    chakra.button,\n    {\n      ref: useMergeRefs(ref, _ref),\n      as,\n      type: type != null ? type : defaultType,\n      \"data-active\": dataAttr(isActive),\n      \"data-loading\": dataAttr(isLoading),\n      __css: buttonStyles,\n      className: cx(\"chakra-button\", className),\n      ...rest,\n      disabled: isDisabled || isLoading,\n      children: [\n        isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--start\",\n            label: loadingText,\n            placement: \"start\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        ),\n        isLoading ? loadingText || /* @__PURE__ */ jsx(chakra.span, { opacity: 0, children: /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }) }) : /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }),\n        isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--end\",\n            label: loadingText,\n            placement: \"end\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        )\n      ]\n    }\n  );\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props;\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    leftIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginEnd: iconSpacing, children: leftIcon }),\n    children,\n    rightIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginStart: iconSpacing, children: rightIcon })\n  ] });\n}\n\nexport {\n  Button\n};\n","// src/use-button-type.tsx\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\nexport {\n  useButtonType\n};\n"],"names":["LoginForm","dispatch","useDispatch","className","css","onSubmit","evt","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","autoComplete","type","name","as","colorScheme","size","borderRadius","mx","my","Login","Helmet","createContext","strict","useButtonGroup","ButtonIcon","props","children","rest","_children","isValidElement","cloneElement","focusable","_className","cx","jsx","chakra","display","alignSelf","flexShrink","displayName","ButtonSpinner","label","placement","spacing","Spinner","color","width","height","__css","marginProp","spinnerStyles","useMemo","alignItems","position","assignRef","ref","current","error","Error","mergeRefs","refs","node","forEach","useMergeRefs","Button","forwardRef","group","styles","useStyleConfig","omitThemingProps","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","spinner","spinnerPlacement","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useState","isButton","setIsButton","useCallback","tagName","useButtonType","_ref","defaultType","contentProps","jsxs","dataAttr","disabled","opacity","ButtonContent","Fragment","marginEnd","marginStart"],"sourceRoot":""}