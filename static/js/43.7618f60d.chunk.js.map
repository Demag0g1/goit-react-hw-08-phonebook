{"version":3,"file":"static/js/43.7618f60d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/contactList/ContactList.module.css?7e3b","components/contactList/ContactList.jsx","webpack://react-homework-template/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","webpack://react-homework-template/./src/components/contactForm/ContactForm.module.css?fd94","../node_modules/nanoid/index.browser.js","components/contactForm/ContactForm.jsx","pages/Phonebook.js"],"sourcesContent":["\n\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__S-drv\",\"item\":\"ContactList_item__-Qv6N\",\"number\":\"ContactList_number__DkTFU\",\"button\":\"ContactList_button__kVtvE\"};","import css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const contactsFiltered = contacts?.filter(contact =>\n    contact?.name?.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const onDelContact = id => {\n    dispatch(deleteContact(id));\n  };\n  if (!contactsFiltered?.length) {\n    return (\n      <div>\n        {' '}\n        <br />\n        No contacts found ¯\\_(ツ)_/¯{' '}\n      </div>\n    );\n  }\n\n  return (\n    <ul className={css.list}>\n      {contactsFiltered.map(({ id, avatar, name, number }) => (\n        <div className={css.item} key={id}>\n          <img\n            style={{ width: '2rem', borderRadius: '50%' }}\n            src={avatar}\n            alt={name}\n          />\n          <span>{name}:</span>\n          <span className={css.number}>{number}</span>\n          <button\n            className={css.button}\n            type=\"button\"\n            onClick={() => onDelContact(id)}\n          >\n            Delete\n          </button>\n        </div>\n      ))}\n    </ul>\n  );\n};\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__R4e-B\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <label>\n      Find contacts by name\n      <br />\n      <input\n        className={css.input}\n        onChange={evt => dispatch(setFilter(evt.target.value.trim()))}\n        value={filter}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Start find by name...\"\n      />\n    </label>\n  );\n};\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__ttXmo\",\"label\":\"ContactForm_label__VF051\",\"input\":\"ContactForm_input__e2U+9\",\"button\":\"ContactForm_button__lCDHx\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const contact = {\n      id: nanoid(),\n      name: evt.currentTarget.elements.name.value,\n      number: evt.currentTarget.elements.number.value,\n    };\n\n    const addList = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (addList) {\n      return alert(`${contact.name} is already in contacts!`);\n    }\n    dispatch(addContact(contact));\n    evt.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label htmlFor={nanoid()}>\n          Name\n          <br />\n          <input\n            className={css.input}\n            type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            name=\"name\"\n            placeholder=\"John Dow\"\n            id={nanoid()}\n            minLength={3}\n            required\n          />\n        </label>\n        <br />\n        <label htmlFor={nanoid()}>\n          Phone number\n          <br />\n          <input\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n            placeholder=\"123-456-7890\"\n            id={nanoid()}\n            minLength={10}\n            maxLength={10}\n            required\n          />\n        </label>\n        <br />\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactList } from 'components/contactList/ContactList';\nimport { Filter } from 'components/filter/Filter';\nimport { ContactForm } from 'components/contactForm/ContactForm';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n  </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","ContactList","useSelector","dispatch","useDispatch","contactsFiltered","contact","name","toLowerCase","includes","length","className","css","map","id","avatar","number","style","width","borderRadius","src","alt","type","onClick","deleteContact","onDelContact","Filter","onChange","evt","setFilter","target","value","trim","placeholder","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","onSubmit","preventDefault","currentTarget","elements","find","alert","addContact","reset","htmlFor","pattern","minLength","required","maxLength","Tasks","useEffect","fetchContacts","Helmet"],"sourceRoot":""}